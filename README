login: ton
password: 123

Plans: 
-Error handlers
-Optimization (DB requests and cash)
-Full functionality of Menu view (with restriction to add new menu items and change recipes for not admins)
-Improve DB - delete RecipeRequirement table and add recipe field (JSON) to MenuItem table. Would works like Purchase table.

PROJECT TASK:

You’ve been asked by a restaurant owner to build an application that will help keep track of how much food they have throughout the day. The owner starts the day with:

1. An inventory of different Ingredients, their available quantity, and their prices per unit
2. A list of the restaurant’s MenuItems, and the price set for each entry
3. A list of the ingredients that each menu item requires (RecipeRequirements)
4. A log of all Purchases made at the restaurant


Knowing that information, the restaurant, Django Delights’ owner has asked for the following features:

1. They should be able to enter in new recipes along with their recipe requirements, and how much that menu item costs.
2. They should also be able to add to the inventory a name of an ingredient, its price per unit, and how much of that item is available.
3. They should be able to enter in a customer purchase of a menu item. When a customer purchases an item off the menu, the inventory should be modified to accommodate what happened, as well as recording the time that the purchase was made.


Here are some helpful tips to get you started thinking about the project: Your ingredients, recipes, and purchase data should be stored in a database, and should be rendered back to the Django views. Your Django backend should supply endpoints to create new recipes via a form submission, submit customer purchases from a different form, and get information about the total cost of inventory, the total revenue for the day, the different purchases that were made, and how much inventory is required to restock (as an initial example) to render them into a Django view.
